Contents
--------

1) Introduction
2) Building with autoconf/automake
2.1) Building JSBSim libraries
3) Building with cmake
3.1) Linux
3.2) Windows MinGW
3.3) Windows MSVC 2010
3.4) Windows MSVC 2011
4) Contact


1) Introduction
---------------

JSBSim is a multi-platform, general purpose object-oriented Flight
Dynamics Model (FDM) written in C++. Jon Berndt and Tony Peden began
about mid-1998 writing JSBSim. As of this writing it is the default
FDM for FlightGear. JSBSim can also be run in a standalone batch mode
for testing and study. More information on JSBSim can be found at the
JSBSim home page here:

http://www.jsbsim.org


2) Building with autoconf/automake
----------------------------------

Unpack the distribution tarball (if needed - CVS users will have
downloaded the code directly) using your preferred method, and change
to the working directory. For example :

$ tar xvfz JSBSim-0.1.2.tar.gz
$ cd JSBSim-0.1.2

NOTE for CVS users: If you are using JSBSim from a CVS checkout, or
snapshot, you will need to create the initial configure script. The
commands to do this have been included in the 'autogen.sh' script, so
just :

$ ./autogen.sh [--no-configure]

If you wish to customise your version of JSBSim, use the following to
determine any build-time options you may be interested in.

$ ./configure --help

Then :

$ ./configure

This will check your system platform, compiler and other local
configuration variables needed to build JSBSim, and generates the
necessary Makefiles. Next :

$ make

Will compile the various classes, and build the JSBSim application.


2.1) Building JSBSim libraries
------------------------------

By default, the JSBSim libraries are not built. To build and install
the libraries, use:

$ ./autogen.sh --enable-libraries [--disable-static] [--enable-shared]

The configure options can be used to select what libraries to build.

$ make install

Unless specified otherwise (with --prefix configure option), this will
install JSBSim libraries into '/usr/local/lib' and JSBSim headers
into '/usr/local/include/JSBSim'.


3) Building with cmake
----------------------

Unpack the distribution tarball (if needed - CVS users will have
downloaded the code directly) using your preferred method, and change
to the working directory. For example :

$ tar xvfz JSBSim-x.y.z.tar.gz
$ cd JSBSim-x-y-z

The following usages of cmake consist in :
 - making a build directory : cmake can build out of src tree. It's
   very convenient in order to let the sources tree clean.
 - invoking cmake : cmake has several front-ends. In the examples we
   call the command line, but you can invoke the ncurses (ccmake) or
   the QT GUI (cmake-gui).
 - call the selected build toolchain.

Optionally, shared libraries can be built by invoking the parameter
BUILD_SHARED_LIBS

The ".." means parent directory, it shouldn't be omitted.

3.1) Linux
----------

Run the following commands :

$ mkdir build_linux
$ cd build_linux
$ cmake .. [-DBUILD_SHARED_LIBS]
$ make
$ make install [DESTDIR=_install]

To uninstall you can call :
$ xargs rm < install_manifest.txt


3.2) Windows MinGW
------------------

Tested with MinGW of CodeBlocks 12.11.

$ mkdir build_mingw
$ cd build_mingw
$ "c:\Program Files\CodeBlocks\MinGW\mingwvars.bat"
$ cmake -G "MinGW Makefiles" ..  [-DBUILD_SHARED_LIBS]
$ mingw32-make
$ mingw32-make install [DESTDIR=_install]


3.3) Windows MSVC 2010
----------------------

Tested with MSVC 2010 express SP1.

$ mkdir build_msvc_10
$ cd build_msvc_10
$ "c:\Program Files\Microsoft Visual Studio 10.0\VC\bin\vcvars32.bat"
$ cmake -G "Visual Studio 10" ..  [-DBUILD_SHARED_LIBS]
$ msbuild jsbsim.sln

You can also open jsbsim.sln with visual studio IDE.


3.4) Windows MSVC 2011
----------------------

Tested with MSVC 2012 express.

$ mkdir build_msvc_11
$ cd build_msvc_11
$ "c:\Program Files\Microsoft Visual Studio 11.0\VC\bin\vcvars32.bat"
$ cmake -G "Visual Studio 11" ..  [-DBUILD_SHARED_LIBS]
$ msbuild jsbsim.sln

You can also open jsbsim.sln with visual studio IDE.


4) Contact
----------

For more information on JSBSim contact Jon Berndt at jon@jsbsim.org.


